import Shader, { ShaderType } from '../appearance/Shader';
import VAO, { VAOType } from '../buffer/VAO';
import Texture, { TextureType } from '../appearance/Texture';
import Material from '../appearance/material/Material';
import Sound, { SoundType } from '../sound/Sound';
declare class ResourceManager {
    private static _instance;
    private _shaders;
    private _vaos;
    private _textures;
    private _materials;
    private _sounds;
    private constructor();
    private static getInstance;
    static loadVAO(vaos: VAOType[]): ResourceManager;
    loadVAO(vaos: VAOType[]): ResourceManager;
    static getVAO(name: string): VAO;
    getVAO(name: string): VAO;
    static forEachVAO(callback: (vao: VAO) => void): ResourceManager;
    forEachVAO(callback: (vao: VAO) => void): ResourceManager;
    static loadShader(shaders: ShaderType[]): ResourceManager;
    loadShader(shaders: ShaderType[]): ResourceManager;
    static getShader(name: string): Shader;
    getShader(name: string): Shader;
    static forEachShader(callback: (shader: Shader) => void): ResourceManager;
    forEachShader(callback: (shader: Shader) => void): ResourceManager;
    static loadTextures(textures: TextureType[]): ResourceManager;
    loadTextures(textures: TextureType[]): ResourceManager;
    static getTexture(name: string): Texture;
    getTexture(name: string): Texture;
    static forEachTexture(callback: (texture: Texture) => void): ResourceManager;
    forEachTexture(callback: (texture: Texture) => void): ResourceManager;
    static anyTexture(predicate: (texture: Texture) => boolean): boolean;
    anyTexture(predicate: (texture: Texture) => boolean): boolean;
    static addMaterials(materials: Material[]): ResourceManager;
    addMaterials(materials: Material[]): ResourceManager;
    static getMaterial(name: string): Material;
    getMaterial(name: string): Material;
    static forEachMaterial(callback: (material: Material) => void): ResourceManager;
    forEachMaterial(callback: (material: Material) => void): ResourceManager;
    static addSounds(sounds: SoundType[]): ResourceManager;
    addSounds(sounds: SoundType[]): ResourceManager;
    static getSound(name: string): Sound;
    getSound(name: string): Sound;
    static forEachSound(callback: (sound: Sound) => void): ResourceManager;
    forEachSound(callback: (sound: Sound) => void): ResourceManager;
    static anySound(predicate: (sound: Sound) => boolean): boolean;
    anySound(predicate: (sound: Sound) => boolean): boolean;
}
export default ResourceManager;
//# sourceMappingURL=ResourceManager.d.ts.map